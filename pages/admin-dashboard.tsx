// pages/admin-dashboard.tsx
import { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import jsPDF from "jspdf";
import { useRouter } from "next/router";
import { useSession, signOut } from "next-auth/react";

type Questionnaire = {
  id: number;
  name: string;
  email: string;
  phone: string;
  projectType: string;
  description: string;
  preferredTech?: string | null;
  budget: string;
  timeline: string;
  communication?: string | null;
  backendNeeded: boolean;
  hostingDeployment: boolean;
  additionalInfo?: string | null;
  createdAt: string;
};

export default function AdminDashboard() {
  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);
  const [loading, setLoading] = useState(true);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const router = useRouter();
  const { data: session, status } = useSession();

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/login");
    }
  }, [status, router]);

  useEffect(() => {
    async function fetchData() {
      try {
        const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "";
        const res = await fetch(`${baseUrl}/api/questionnaires/user`, {
          credentials: "include",
        });
        if (!res.ok) throw new Error("Failed to fetch questionnaires");
        const data = await res.json();
        setQuestionnaires(data.questionnaires || []);
      } catch (err) {
        console.error("Error fetching questionnaires:", err);
      } finally {
        setLoading(false);
      }
    }
    fetchData();
  }, []);

  const handleLogout = async () => {
    try {
      await signOut({ callbackUrl: "/login" });
    } catch (err) {
      console.error("Logout failed:", err);
    }
  };

  const handleDownloadPDF = (q: Questionnaire) => {
    const doc = new jsPDF();
    doc.setFont("Helvetica", "bold");
    doc.setFontSize(18);
    doc.text("Questionnaire Hub", 105, 15, { align: "center" });
    doc.setFontSize(14);
    doc.text("Questionnaire Submission", 105, 25, { align: "center" });

    let y = 35;
    doc.setFont("Helvetica", "bold");
    doc.text("User Information", 10, y);
    y += 8;
    doc.setFont("Helvetica", "normal");
    doc.text(`ID: ${q.id}`, 10, y);
    y += 6;
    doc.text(`Name: ${q.name}`, 10, y);
    y += 6;
    doc.text(`Email: ${q.email}`, 10, y);
    y += 6;
    doc.text(`Phone: ${q.phone}`, 10, y);
    y += 6;
    doc.text(`Submitted At: ${new Date(q.createdAt).toLocaleString()}`, 10, y);

    y += 10;
    doc.setFont("Helvetica", "bold");
    doc.text("Project Details", 10, y);
    y += 8;
    doc.setFont("Helvetica", "normal");
    doc.text(`Project Type: ${q.projectType}`, 10, y);
    y += 6;
    doc.text(`Description:`, 10, y);
    y += 6;
    doc.setFontSize(11);
    doc.text(q.description, 12, y, { maxWidth: 186 });
    y += 20;

    if (q.preferredTech) {
      doc.setFontSize(12);
      doc.text(`Preferred Tech: ${q.preferredTech}`, 10, y);
      y += 6;
    }

    doc.text(`Budget: ${q.budget}`, 10, y);
    y += 6;
    doc.text(`Timeline: ${q.timeline}`, 10, y);
    y += 6;
    if (q.communication) doc.text(`Communication: ${q.communication}`, 10, y);
    y += 6;
    doc.text(`Backend Needed: ${q.backendNeeded ? "Yes" : "No"}`, 10, y);
    y += 6;
    doc.text(`Hosting/Deployment: ${q.hostingDeployment ? "Yes" : "No"}`, 10, y);
    y += 6;
    if (q.additionalInfo) doc.text(`Additional Info: ${q.additionalInfo}`, 10, y);

    doc.setFontSize(10);
    doc.text("Generated by Questionnaire Hub", 105, 290, { align: "center" });
    doc.save(`questionnaire-${q.id}.pdf`);
  };

  const goToChats = () => {
    router.push("/admin-chats");
  };

  const goToUpdates = () => {
    router.push("/admin-updates");
  };

  return (
    <div className="min-h-screen flex bg-gradient-to-br from-indigo-900 via-teal-800 to-cyan-700 text-white relative">
      <motion.aside
        initial={{ x: -250, opacity: 0 }}
        animate={{ x: 0, opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="hidden md:flex flex-col w-64 h-screen px-6 py-10 bg-black/60 backdrop-blur-md border-r border-white/20"
      >
        <h2 className="text-2xl font-bold text-cyan-300 mb-8">Admin Menu</h2>
        <nav className="flex flex-col space-y-4">
          <button onClick={() => setSidebarOpen(false)} className="hover:text-cyan-400 text-left">
            View Questionnaires
          </button>
          <button onClick={goToChats} className="hover:text-cyan-400 text-left">
            Chats
          </button>
          <button onClick={goToUpdates} className="hover:text-cyan-400 text-left">
            Updates
          </button>
          <button onClick={handleLogout} className="hover:text-red-400 text-left">
            Logout
          </button>
        </nav>
      </motion.aside>

      <AnimatePresence>
        {sidebarOpen && (
          <motion.aside
            initial={{ x: -250 }}
            animate={{ x: 0 }}
            exit={{ x: -250 }}
            transition={{ duration: 0.4 }}
            className="fixed top-0 left-0 w-64 h-full bg-black/90 backdrop-blur-md z-50 px-6 py-10 border-r border-white/20 md:hidden"
          >
            <button
              onClick={() => setSidebarOpen(false)}
              className="text-right w-full text-gray-300 hover:text-white mb-6"
            >
              ✖ Close
            </button>
            <h2 className="text-2xl font-bold text-cyan-300 mb-8">Admin Menu</h2>
            <nav className="flex flex-col space-y-4">
              <button onClick={() => setSidebarOpen(false)} className="hover:text-cyan-400 text-left">
                View Questionnaires
              </button>
              <button onClick={goToChats} className="hover:text-cyan-400 text-left">
                Chats
              </button>
              <button onClick={goToUpdates} className="hover:text-cyan-400 text-left">
                Updates
              </button>
              <button onClick={handleLogout} className="hover:text-red-400 text-left">
                Logout
              </button>
            </nav>
          </motion.aside>
        )}
      </AnimatePresence>

      <div className="flex-1 px-6 py-10 w-full">
        <motion.header
          initial={{ y: -50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.8 }}
          className="flex justify-between items-center mb-10"
        >
          <button
            onClick={() => setSidebarOpen(true)}
            className="md:hidden px-4 py-2 rounded-lg neon-btn font-semibold"
          >
            ☰ Menu
          </button>
          <h1 className="text-2xl sm:text-3xl font-extrabold tracking-wide text-white drop-shadow-lg">
            Admin Dashboard
          </h1>
        </motion.header>

        <motion.section
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="p-6 rounded-2xl shadow-xl border border-white/20 bg-black/40 backdrop-blur-md"
        >
          <h2 className="text-2xl font-semibold text-cyan-300 mb-4">Questionnaires</h2>

          {loading ? (
            <p className="text-gray-300">Loading...</p>
          ) : questionnaires.length === 0 ? (
            <p className="text-gray-300">No questionnaires found.</p>
          ) : (
            <div className="space-y-4">
              {questionnaires.map((q) => (
                <div
                  key={q.id}
                  className="p-4 rounded-xl border border-white/20 shadow-md bg-white/10 text-white flex justify-between items-start"
                >
                  <div>
                    <p className="font-semibold mb-1">{q.name}</p>
                    <p>{q.email} | {q.phone}</p>
                    <p className="mt-1">Project Type: {q.projectType}</p>
                    <p className="mt-1">{q.description}</p>
                    {q.preferredTech && <p className="mt-1">Tech: {q.preferredTech}</p>}
                    <p className="mt-1">Budget: {q.budget}</p>
                    <p className="mt-1">Timeline: {q.timeline}</p>
                    {q.communication && <p className="mt-1">Communication: {q.communication}</p>}
                    <p className="mt-1">Backend Needed: {q.backendNeeded ? "Yes" : "No"}</p>
                    <p className="mt-1">Hosting: {q.hostingDeployment ? "Yes" : "No"}</p>
                    {q.additionalInfo && <p className="mt-1">Additional: {q.additionalInfo}</p>}
                  </div>
                  <button
                    onClick={() => handleDownloadPDF(q)}
                    className="px-3 py-1 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg ml-4"
                  >
                    Download PDF
                  </button>
                </div>
              ))}
            </div>
          )}
        </motion.section>
      </div>

      <style jsx>{`
        .neon-btn {
          background: transparent;
          border: 2px solid #22d3ee;
          box-shadow: 0 0 10px #22d3ee, 0 0 20px #0891b2;
          color: #fff;
        }
        .neon-btn:hover {
          box-shadow: 0 0 20px #a855f7, 0 0 40px #22d3ee;
          border-color: #a855f7;
        }
      `}</style>
    </div>
  );
}
